[
    {
        "title": "From C to PEP-249: A Database API Odyssey ",
        "name": "Matt Wozniski",
        "abstract": "Most databases natively support a C API. Python has a standard for what database APIs should look like: PEP-249. I'll discuss my experiences adapting one particular database's C API into a PEP-249 compliant module, including a few clever solutions to overcome issues I encountered.",
        "description": "Most databases natively support a C API. Python has a standard for what database APIs should look like: PEP-249. I'll discuss my experiences adapting one particular database's C API into a PEP-249 compliant module, starting with building thin, Python-callable bindings to the C library and eventually implementing PEP-249's higher level abstractions on top of those low-level bindings. Along the way, I'll discuss several places where the database's behavior couldn't be easily adapted to the Python DB-API interface, and some clever solutions to bridging those gaps.",
        "bio": "Matt is a Senior Software Developer on Bloomberg's Python Infrastructure team, where he uses Python, C, and C++ to improve the depth, breadth and health of Bloomberg's Python ecosystem."
    },
    {
        "title": "An Introduction to Hardware Drivers in (Micro)Python",
        "name": "Carlos Pereira Atencio",
        "abstract": "Have you ever been curious about how device drivers control the hardware in your computer, phone, or IoT widget?\nHave you always thought you would needed to learn C or other low-level language to write a driver?\nThanks to MicroPython we can control the physical world with Python code!",
        "description": "MicroPython is a lean an efficient implementation of the Python 3 programming language for microcontrollers and constrained environments. Thanks to MicroPython we can use Python to control embedded devices, allowing us to prototype faster, release to market sooner, provide more engaging computing education, or simply have more fun!\r\n\r\nIt\u2019s never been easier to adventure in the embedded space, and using a familiar language is a great advantage. It\u2019s incredible that we can simply \u201cupip install\u201d a module to control our brand new sensor, display, controller, etc; but how does it work? Or what do we do if there isn\u2019t an existing library available?\r\nThis talk will focus on the general concepts needed to understand how these hardware devices operate and how to interface with them. It will provide simple examples showing how easy it is to do in Python, and illustrate how the same concepts are used to drive complex systems.",
        "bio": "Carlos is a Software Engineer at the Micro:bit Educational Foundation, a not-for-profit organisation with the goal to inspire every child to create their best digital future, and Python is a big part of that!\r\n\r\nCarlos professional background is in embedded software, having worked in the aerospace and telecommunications industries, he has now found his true passion in EdTech, where he can build learning tools for computing education using physical hardware. \r\n"
    },
    {
        "title": " The Adventures of pip and pacman: A Tale of Package Managers ",
        "name": "L\u00e1szl\u00f3 Kiss Koll\u00e1r",
        "abstract": "Installing Python packages can be frustrating. If we follow common practices and `pip install` packages, we will likely hit issues. Installing and managing Python packages is easier if we follow some simple rules. Let\u2019s look at best practices for Python package management via real-world examples.",
        "description": "### Overview\r\n\r\nInstalling Python packages can be frustrating for new (and even not so new) users of Python. If we simply follow the common practice and pip install packages, we will likely hit issues. Installing and managing Python packages is actually quite simple, as long as we follow a few simple rules.\r\n\r\nThis talk will look at best practices for Python package management using real world examples.  \r\n\r\n### Audience\r\n\r\nThis talk is aimed mostly at people new to Python but it should also be informative for seasoned users. No Python programming knowledge should be necessary to follow along. \r\n\r\nAfter the talk the audience should have a good idea how to install and manage Python packages in the most common situations. \r\n\r\n\r\n### Outline\r\n\r\n#### Introduction\r\n- A few words about myself\r\n- Why deliver a talk about package management\r\n\r\n#### Packaging tools\r\n- pip\r\n- OS package managers\r\n- Which one should we use?\r\n\r\n#### System-wide package installations\r\n- What are system-wide or global installations?\r\n- Let's try to install something with `pip install` (and look at how it can fail)\r\n- `sudo pip install` and why you should never do it\r\n- Conclusion\r\n\r\n#### Non system-wide package installations\r\n- What are non system-wide installations?\r\n- User scheme installations, and some situations it doesn't work so well\r\n- Virtual environments\r\n    - What is it\r\n    - How to create and manage them\r\n    - Working inside a virtual environment\r\n    - Using them without activation\r\n- Conda\r\n- Conclusion\r\n\r\n#### Closing\r\n- Lessons learned\r\n- The recipe for successful package management\r\n",
        "bio": "L\u00e1szl\u00f3 Kiss Koll\u00e1r is a senior software engineer at Bloomberg, where he works on the Python Infrastructure team. He has close to 15 years of industry experience and has worked on a diverse set of projects, such as optimising code for vector processors, creating a distributed JVM, and generating automatically produced news content."
    },
    {
        "title": "Intelligent K-Nearest Neighbours: Why NOT to use Euclidean distance in KNN for recommender systems",
        "name": "Aparna Pande",
        "abstract": "We present a recommendation engine using Python that combines Agglomerative Hierarchical Clustering and K-Nearest Neighbors \u2014 an approach we call \u201cIntelligent KNN.\u201d This talk makes the case against using Euclidean distance to compute similarity, in a unique approach to get better recommendations.",
        "description": "A rule-based recommendation system, commonly found in practice, has a few downsides. While it may work well for data points that behave predictably, it may not work very well for outliers. In addition, users of the recommendation system in interactive applications may be unaware of the rules driving the recommendations, and therefore may be unable to modify/tweak the rules selectively for different datasets.\r\n\r\nA common algorithm used by data scientists in recommendation systems is K-Nearest Neighbors, which uses Euclidean distance as a similarity measure. However, this may not translate accurately if the rule-based system cannot be represented by a combination of weights applied to the Euclidean distance.\r\n\r\nOur solution to make the rule-based system more flexible, transparent and adaptive was to use a recommendation system that periodically pre-clustered data points using Agglomerative Hierarchical Clustering and Jaccard Distance on the proprietary rules. We used that cluster classification as a feature in the KNN calculation. Python scikit-learn libraries allowed us to make this recommendation system interactive, providing frequent updates and near-real-time results.\r\n\r\nThis talk will provide a high-level overview of the Machine Learning and mathematical concepts, detail our approach and reasoning behind switching a commonly used default similarity measure, and walk through its application using scikit-learn libraries.",
        "bio": "Aparna is a senior engineer for the Fixed Income Data and Analytics Platform at Bloomberg. She has an undergraduate degree in Computer Science (with a concentration in AI) from Cornell University. Since joining Bloomberg, Aparna has driven a number of initiatives in New York and London while increasing the breadth of the Fixed Income Data Platform, providing low latency cross-asset search and analytics capabilities to teams and functions at Bloomberg, using a suite of mainly open-source technologies."
    },
    {
        "title": "The soul of the beast: Everything about Python's grammar",
        "name": "Pablo Galindo Salgado",
        "abstract": "In this talk, we will learn what lies at the core of the Python programming language: the Python Grammar. This is a journey that will try to answer how the technical details of the grammar relate to the properties of Python we know and love and how it can be modified to add new exciting features.",
        "description": "We will try to answer a straightforward question: What makes Python so easy to learn and read? Other languages also have a robust community and a compelling ecosystem and standard library, but Python somehow stands out on how easy it is to understand existing code and how quickly and pleasantly people can learn it. In this talk, we learn everything about the Python Grammar: how the Python parser is automatically generated and how it works, how the technical details of the grammar translate into the properties of the language we all know and love, what are the limitations that prevent some grammar rules you would think are trivial from being implement, and finally, how to include new grammar rules in CPython in the form of a new operator with an associated protocol.  \r\n\r\nThe audience will discover one of the core pieces of the language that sits at the middle of the decisions about what new rules can or cannot be implemented in the Python programming language. They will learn how the particularities of the grammar limit what can be achieved but also serve to maintain the language consistent, powerful but straightforward. Attendants will learn how core developers solved some challenging scenarios that arise as a consequence of said limitations or how others cannot be resolved unless Python gets a significant transformation in the internal mechanism that parses the grammar. Finally, they will learn how a new rule is added to the CPython grammar, serving as a perfect example of how all the pieces come together. In summary, the audience will gain a more technical response to why people perceive the Python programming language as easy but powerful one and at the same time will gain some insight on how to understand and extend the pieces that form it. This talk will not only help members of the audience understand better the design of the language a how grammars and parser work, but will also help people wanting to contribute to CPython understanding the general structure of the compiler pipeline and how to work on it. \r\n\r\nThis talk is for those that want to understand Python a bit deeper: not only how everything works under the hood but also what are the technical decisions in its making and what are the consequences. The talk is targeted to all Python programmers, no matter the skill level as everyone will find something for their particular level of expertise:\r\n\r\n- Beginner programmers will be introduced in the topic of language grammars and will learn what a Grammar is and what are the building blocks. Also, the audience members at this level will gain insight into how everything is thread together in CPython.\r\n\r\n- Medium and advanced programmers will learn some in-depth technical details and how they relate to features they already know and understand. The talk not only will try to enlight some new areas related to grammar technicalities, parser features and design and CPython implementation details but will also connect many pieces of information to explain how the small technical decisions impact the bigger picture.",
        "bio": "Pablo Galindo Salgado works in the Python Infrastructure team at the Software Infrastructure department at Bloomberg L.P. He is a CPython core developer and a Theoretical Physicist specialized in general relativity and black hole physics. He has also a cat but he does not code. "
    },
    {
        "title": "What is your ML test score?",
        "name": "Tania Allard",
        "abstract": "Machine learning in production is different to ML in R&D environment. So how can you test your ML models successfully before even reaching this stage? This session will present a number of techniques to test your ML quality and decay in both your R&D and production environments appropriately.",
        "description": "Using machine learning in real-world applications and production systems is a very complex task involving issues rarely encountered in toy problems, R&D environments, or offline cases.\r\nTesting, monitoring, and logging are key considerations for assessing the decay, current status and production-readiness of machine learning systems.  But how much of these is enough? Where do we even get started? Who should be responsible for the testing and the monitoring? How often have you heard the phrase \u201ctest in production\u201d when it comes to machine learning? If your answer is: \u201ctoo often\u201d perhaps you need to change your strategy.\r\n\r\n We will cover some of the most frequent issues encountered in real-life ML applications and how we can make our systems more robust. We will also consider a number of indicators pointing to decay of models or algorithms in production systems.\r\nBy the end of the talk, the audience will have a clear rubric with actionable tests and examples to ensure that the quality or a model in production is adequate. It will also provide valuable guidelines to help engineers, DevOps, and data scientist to evaluate and improve the quality of ML models before they even reach production stage.\r\n",
        "bio": "Tania is a Research Engineer and Microsoft developer advocate with vast experience in academic research and industrial environments. Her main areas of expertise are within data-intensive applications, scientific computing, and machine learning. One of her main areas of expertise is the improvement of processes, reproducibility, and transparency in research, data science and artificial intelligence.  \r\nOver the last few years, she has trained hundreds of people on scientific computing reproducible workflows and ML models testing, monitoring and scaling and delivered talks on the topic worldwide. \r\n\r\nShe is passionate about mentoring, open source, and its community and is involved in a number of initiatives aimed to build more diverse and inclusive communities. She is also a contributor, maintainer, and developer of a number of open source projects and the Founder of Pyladies NorthWest UK.\r\n"
    },
    {
        "title": "How to best package your library?",
        "name": "Bern\u00e1t G\u00e1bor",
        "abstract": "Join me in finding out how you can achieve sharing code across projects by creating libraries. We'll learn about how the cheese shop, pip, twine, setuptools, flit and poetry all fit together (past, present, and future); and how the infamous PEP-517 and PEP-518 try to improves the packaging domain.",
        "description": "One of the most fundamental principles of programming is \"don't repeat yourself.\" Join me in finding out how you can achieve sharing code across projects by creating libraries and what tools/components you can use. We'll learn about how the cheese shop, pip, twine, setuptools, flit and poetry all fit together (past, present, and future); and how the infamous PEP-517 and PEP-518 try to make this a much more pleasant experience for everyone.\r\n\r\nI am targeting this talk at developers who have some level of Python knowledge and want to find out what's the best way to package and distribute their libraries. It will also help developers who have been using setuptools happily for the last few years, but want to learn about other ways to do this (aka choose the best tool for the situation - rather than choose whatever your hammer is). People will leave the talk with a good grasp of the state of the Python packaging ecosystem and where it is heading. A concise outline goes as follows:\r\n\r\n- How to share code - quick, high-level overview of libraries\r\n  - What is a library\r\n  - The difference between source tree/VCS/source distribution/wheel\r\n  - How we share libraries (how pip/twine/pypi/venv interact)\r\n- Builders\r\n  - setuptools\r\n  - flit (3 minutes)\r\n  - poetry (2 minutes)\r\n- PEP-517/PEP-518 to unify them all\r\n  - What it is, how it does\r\n  - pip support level\r\n  - tox support level\r\n- Summary/Questions",
        "bio": "I work at Bloomberg, a technology company with more than 5,000 software engineers worldwide -- 2,000 of whom use Python in their daily roles. I'm part of the Python Guild at the company, a group of people dedicated to improving the adoption, usage and best practices of Python at the company. Within the last two years, I've given multiple presentations to various groups (each with around 100 attendees): twice at internal meetups, once at the London Python Meetup, and two conferences in 2018 (PyLondinium and PyCon EU). I've been using Python since 2011, and have been a busy participant in the open source Python community: I am the maintainer of the virtualenv package (tool allowing the creation of Python virtual environments for all Python versions and interpreter types - CPython/Jython/pypy) and the tox tool (allow for easy testing to ensure Python code works under multiple Python version/library versions)."
    },
    {
        "title": "Nothingness and identity in Python",
        "name": "Daniele Procida",
        "abstract": "There's something rich, beautiful and mysterious in the several kinds of nothingness and identity that we encounter as Python programmers. Understanding the connections they make with ontology, epistemology and metaphysics adds another dimension to the joy of programming.",
        "description": "As Python programmers, we're blessed - we have several kinds of nothingness and identity at our fingertips. There's something rich, beautiful and mysterious in them, and in their variety and relation. For the programmer, the discovery of them is an opening into Python's power and expressiveness.\r\n\r\nIt's the same richness and mystery that logicians and philosophers have discovered in them: entire schools of thought are founded on various approaches to nothingness. Programmers are in fact working with key ideas that are also crucially important to ontology, epistemology and metaphysics.\r\n\r\nFrom the pioneers of boolean electronics who adopted the NAND gate as the basic building block of logical circuits to thinkers like Sartre and Kant, nothing repeatedly turns out to be at the heart of everything. And the Python programmer who gets a surprise when checking for the identity of a variable is in fact running into the same problems that Heraclitus was aware of, 25 centuries before Guido van Rossum was even born. We're in good company, in other words.\r\n\r\nNothingness and identity and the way we use them in Python and Django are related to phenomenology, utopia, politics, theories of agency and much, much more.\r\n\r\nKnowing about these connections might not make anyone a better programmer, but it can add another dimension to their understanding of the discipline, and add to the richness and beauty of their world, making the joy of programming even deeper.",
        "bio": "I am a [Django](http://djangoproject.com) core developer. I work at [Divio](http://divio.com), and live in Cardiff, where I help run things like [PyDiff](http://www.pydiff.wales), [PyCon Namibia](http://na.pycon.org/) and [PyCon UK](http://pyconuk.org).\r\n\r\nI've been, with various degrees of success, a high-school teacher, a company director, a philosophy lecturer and some other things I don't care to mention, but what really worked was becoming a programmer a few years ago.\r\n\r\nI'm heavily involved in the international Python/Django open-source software communities and have a special interest in open-source software development in Africa."
    },
    {
        "title": "Gentle introduction to TLS, PKI, and Python's ssl module",
        "name": "Christian Heimes",
        "abstract": "TLS/SSL is the most important and widely-used protocol for secure and encrypted communication. I'm going to introduce you to TLS 1.2 and 1.3, cryptographic building blocks, best-practice configuration, certificates, and public key infrastructure using Python's ssl module",
        "description": "TLS is an ubiquitous protocol for secure communication. It's used in HTTPS, email (IMAP, POP3, SMTP), LDAP, FTP, and more. Some recent protocols like HTTP/2 are not defined for unencrypted channels. TLS offers more than just encryption with symmetric cryptography. It also ensures data integrity and strong authentication with the help of X.509 certificates and public key infrastructure (PKI).\r\n\r\nDid you ever wonder what's the difference between SSL, TLS, and StartTLS? Or what is the meaning of cryptic terms and names like *Server Name Indication*, *Subject Alternative Name*, or *TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384*? What is perfect forward secrecy and why is it so important for privacy? Does HTTPS make my website slow? What is the difference between a root CA, intermediate CA and end-entity certificate? My talk explains how a client and a server establish a secure connection, why a certificate is required, and how TLS 1.3 has improved the handshake.\r\n\r\nSome prior knowledge of cryptography and networking basics are helpful but not required to follow this talk.",
        "bio": "Christian is a long time Python developer from Hamburg/Germany. In the past he has contributed to several Open Source projects such as the CPython interpreter. In the past years he has helped to keep Python secure, for example as member of the Python security response team, secure hashing (PEP 456) and improvements of Python's TLS/SSL module. Nowadays he is employed by Red Hat and works OpenShift container security and FreeIPA identity management."
    },
    {
        "title": "A starter data science process for software engineers",
        "name": "Ian Ozsvald",
        "abstract": "This talk is aimed at software engineers who'd like to start a data science journey but don't know where to start. We'll use an efficient strategy to find and visualise relationships which will let you quickly derisk your own ideas and then justify more ambitious research projects",
        "description": "",
        "bio": "I co-founded PyDataLondon which is now the world's largest Pythonic data science community, I coach data science teams and I teach data science process. I love all things data science, please bring me your questions!"
    },
    {
        "title": "Dunder methods are special",
        "name": "Scott Irwin",
        "abstract": "Special methods are a powerful feature of Python. Such methods have names starting and ending with double underscores (aka dunder). In this talk, we will explore some of those special methods and show how you can use them to make your custom types more full-featured.",
        "description": "Special methods are those methods on a type which are called implicitly by Python to execute a certain operation (e.g., addition). These methods have distinctive names which start and end with double underscores (aka dunder).\r\n\r\nDunder methods are a language feature which allows developers to implement custom types which have the same features and expressiveness as the Python standard types.\r\n\r\nIt is impossible to discuss all of the various dunder methods in a single 25-minute talk, so we will focus on a selected subset of dunder methods. We will discuss how and why you would implement them and in which situations Python will implicitly call them.",
        "bio": "Scott is a Senior Software Engineer at Bloomberg LP where he both develops business critical applications using Python and trains other developers in the Python language."
    },
    {
        "title": "An introduction to ASGI, Asynchronous Server Gateway Interface",
        "name": "Philip Jones",
        "abstract": "WSGI has been a huge success, allowing for an ecosystem of servers and frameworks to exist and develop independently, however, WSGI is unable to support websockets or the new async/await syntax. \nASGI is the asynchronous spiritual successor to WSGI, with websockets and async support built in.",
        "description": "If you develop web appliations in Python you will almost certainly be doing so using WSGI, with the most popular frameworks, Django and Flask, as well as the majority of others being based upon it. WSGI specifies the interface between servers and applications, simplified this interface is,\r\n\r\n    def application(environ, start_response):\r\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/plain\")])\r\n        return b\"Hello, World\"\r\n\r\n\r\nwith the `application` called on each request. The request description and environment is specified in the `environ` dict and the `start_response` is called to send the response status code and headers before the body, which is returned by the `application`.\r\n\r\nASGI also aims to specify the interface between servers and applications, only using the async/await syntax, the interface can be simplified to \r\n\r\n    async def application(scope, receive, send):\r\n        await send({\"type\": \"http.response.start\", \"status\": 200, \"headers\": [(b\"Content-Type\", \"text/plain\")]})\r\n        await send({\"type\": \"http.response.body\", \"body\": b\"Hello World\"})\r\n\r\nwith the `application` awaited on each request and `scope` fulfilling a similar role to `environ`.\r\n\r\nIn this talk I'll explain the above and how it limits WSGI and why ASGI is the solution. I'll also introduce the current ASGI ecosystem and features.\r\n\r\n### Outline\r\n\r\n- Introduction to WSGI (basic code)\r\n- WSGI ecosystem servers (Gunicorn, uWSGI, mod_wsgi) and frameworks (Flask, Django)\r\n- WSGI limitations e.g. Websockets\r\n- ASGI Introduction (basic code)\r\n- ASGI development and history\r\n- ASGI features, websockets, HTTP/2\r\n- ASGI ecosystem servers (Hypercorn, Daphne, Uvicorn) and frameworks (Starlette, Django, Quart).",
        "bio": "I am the head of engineering at Octopus Wealth. I authored the Quart and Hypercorn frameworks and help maintain a number of sans-io libraries in the python-hyper organisation. Previously I was a particle physicist working underground in Canada."
    },
    {
        "title": "Solving Python cold start issues in cloud infrastructure",
        "name": "Denys Makogon",
        "abstract": "First of all, this talk brings quite important, but still ignored the problem of python application startup time. This talk is very useful for people who strive for better python application performance. Also, I'd like to share some techniques for performance profiling and problem-solving.",
        "description": "### Intro\r\n\r\nWe all do cloud applications, no matter if they were built with the cloud (an app that consumes cloud services) or for cloud (an app that was designed to run within cloud/container). The only thing that we, as Python community, haven\u2019t talked out loud is imports performance that is so critical for business especially when you run your own business and cloud provider charges your own credit card. \r\n\r\n### Problem area\r\n\r\nUntil Python 3.7 it was quite challenging to profile application code dependencies and imports specifically. With a new imports profiler, Python developers can measure how much time each import takes at the startup. The interesting thing, a new profiler opened the whole new Python problem - cold start issue.\r\nIn this talk, we will go through one very challenging case: Python in serverless and why most of the Python libraries were never been designed to start fast.\r\n\r\nIf you\u2019re going to attend this talk you\u2019d get the following key takeaways:\r\n\r\n* Python coding strategy (placement, efficient and delayed imports)\r\n\r\n* New things in Python 3.7 related to imports\r\n\r\n* Module coding strategy.\r\n\r\n\r\nand my favourite ones:\r\n\r\n* Why you should be careful with python code in serverless.\r\n\r\n* How to profile cold start and measure overall startup time.\r\n\r\n* The best CPU/RAM configuration for performing cold startup time measures.\r\n\r\n\r\n### WHO is the intended audience for your talk and why you should attend it?\r\n\r\nFirst of all, developers, who got used to code a lot and host their apps in the cloud. Specifically, Python developers who performance testing and adjustments, while running applications in the cloud, but the key target audience here are the developers who do serverless applications and would like to learn some best practices and get into the problem area. \r\n\r\n### WHAT are you going to be talking about and WHAT will people learn from your talk?\r\n\r\nIn this talk, I'll try to explain why and showcase why there's a need to change the way we do Python applications in the clouds, why performance matters and why \"python was not designed to run on tight resources\" is a fake statement.\r\n\r\n### WHY is your talk important/interesting/useful? Explain why people would want to attend your talk.\r\n\r\nLet's decouple these questions onto three.\r\n\r\n#### 1. Why my talk is important?\r\n\r\nBecause most of the developers along with Python core team doesn't make much about the problem of performance, people think that Python and high performance is not something possible. So, during my talk, I'd like to bring this topic to a wider audience around the globe in order to collect the feedback along with showcasing why it matters a lot to people who do cloud-based applications.\r\n\r\n#### 2. Why my talk is interesting?\r\n\r\nWell, based on my experience, at almost all Python events around the world I've attended, people were talking about ML/AI, Django. But nothing about Python performance, because, maybe people don't care about that much, but when you get a bill from your cloud provider you may wonder why does it have $$$$ amount to pay.\r\n\r\n#### 3. Why my talk is useful?\r\n\r\nI'll be giving exact tips on how to make the code efficient and be less resource-intensive (at least I will try to). So, my talk will consist of speaking, coding, giving tips. Isn't that a good mix for a good talk?\r\n\r\n### HOW will you be delivering your talk?\r\n\r\nSpeaking, giving tips, coding and expect to get a good discussion in QA session and after-talk activities.\r\n",
        "bio": "Software enthusiast focused on developing and designing platform and software as a service application for clouds. He\u2019s a principal software developer in Oracle, concentrating on product development along with bringing well-designed and production ready integration with clouds solutions, contributor to various open source projects, cloud-related technologies along having fun with IoT devices and photography.\r\nDenis is a regular attendee and speaker at OpenStack summits (Atlanta, Austin, Paris, Barcelona, Boston) and PyCon Hong Kong 2016, 2017, PyCon Italy 2018. co-author of OpenStack Application development, OpenStack Trove Essentials.\r\n"
    },
    {
        "title": "Data science with Python: from analytics scripts to services in scale",
        "name": "Giuseppe Broccolo",
        "abstract": "How to get from a Jupyter notebook prototype to a distributed service in scale on the cloud. A 5 steps recipe.",
        "description": "There is a scenario that is quite common when doing data science at scale.  \r\nThe Data Science team have developed a good algorithm that suits our purpose and the prototype works well on a test dataset. But how to transform it into a reliable, responsive service ready for production payload? We will got through the steps involved in the evolution of a Jupyter notebook into an auto-scaling service. These steps involve changes in data ingestion, asynchronous processing, dockerisation, kubernetes and cloud technologies. ",
        "bio": "I hold a PhD in Physics and worked at CERN laboratories, where I started my computing career as C/C++ programmer for Montecarlo simulations in particle physics. \r\n\r\nOutside academy, I started to work in data science/engineering 7 years ago, using Python with the main scientific libraries (Pandas, Scipy, Scikit-learn) and the big data Apache stack Kafka-Druid-Hadoop.\r\n\r\nBig fan of the open source ecosystem, I'm member of the board of the ITalian PostgreSQL User Group, and I contributed implementing the support of a new type of geospatial index for two of the main PostgreSQL geospatial extension (PostGIS and pgSphere).\r\n\r\nIn the free time, I like to experiement the new methodologies introduced in data science and in machine learning, and continue to study Python :)"
    },
    {
        "title": "If Errol Street Could Talk: Do we have a diversity problem in Python community?",
        "name": "Cheuk Ting Ho",
        "abstract": "Python community cares about diversity: there's a diversity statement on the PSF website. So do we still have a problem in, especially gender, diversity? We will look at some data and see if there's a true problem in gender diversity, discuss what the problem may be and how to fix it.",
        "description": "The diversity statement quoted as follows: \"The Python Software Foundation and the global Python community welcome and encourage participation by everyone. Our community is based on mutual respect, tolerance, and encouragement, and we are working to help each other live up to these principles. We want our community to be more diverse: whoever you are, and whatever your background, we welcome you.\"\r\n\r\nDiversity, big deal! As an active members and event organisers (and also on the minority side of the gender) in the Python community, we have alway been concern by the question of: Do we truly have a problem in diversity? Especially, gender diversity. We would like to find out the truth, by data science, and see if we can find a clue why and how we can fix it. \r\n\r\nFirst, we will show the research others did regarding the representation of women in the R and Python communities [1]. Then, we will show the research that we did based on our experience and statistic. Including static analysis of the speakers diversity (regarding gender) at major PyCon and PyData conferences. Finally, as we all care about diversity and want improvements, we would like to find out the reason and what we can do about it. We would propose what we, the minorities and allies, could do against this seemingly unbalance situation and make the community better.\r\n\r\nThis talk is for all that who cares about diversity in our community.\r\n\r\n[1] https://reshamas.github.io/why-women-are-flourishing-in-r-community-but-lagging-in-python/",
        "bio": "After spending 5 years doing research in theoretical physics at Hong Kong University of Science and Technology, Cheuk has transferred her analytical and logical skills in natural science and built a career in data science. After being a Data Scientist in one of the biggest worldwide wholesaler in travel business and Inawisdom, an AWS partnered consultancy which deliver machine learning model, Cheuk is now working in Pace, aiming to revolutionise revenue management with industry leading data and computer science.\r\n\r\nCheuk constantly contributes to the community by giving AI and deep learning workshops, organize sprints for open source projects, volunteering at Datakind for charities. At the same time contribute to open source projects including Pandas, Keras, Scikit-learn and Dateutil. Cheuk has also been a guest speaker at University of Oxford and Queen Mary University of London, and various conferences including PyData in Amsterdam and Berlin, PyCon in Israel, UK and Germany, EuroPython and PyLondinium. Believing in gender equality, Cheuk is currently a co-organizer of AI club for Gender Minorities to support Tech Diversity and Inclusion.\r\n\r\n------\r\n\r\nPublic speaker in technology, example of my talk on YouTube: [https://www.youtube.com/playlist?list=PLuyh0gfVhNpGJIV7jt122F1SmdZybzos4][1]\r\n\r\nGitHub: [https://github.com/Cheukting][2]\r\n\r\nSlide Share: [https://www.slideshare.net/CheukTingHo/presentations][3]\r\n\r\nSlides.com:  [https://slides.com/cheukting_ho][4]\r\n\r\nSpeaker Bio: [https://www.papercall.io/speakers/cheukting-ho][5]\r\n\r\nTwitter: [https://twitter.com/cheukting_ho][6]\r\n\r\nLinkedIn: [https://www.linkedin.com/in/cheukting-ho/][7]\r\n\r\n\r\n  [1]: https://www.youtube.com/watch?v=bQ2Qu63SYHw\r\n  [2]: https://github.com/Cheukting\r\n  [3]: https://www.slideshare.net/CheukTingHo/presentations\r\n  [4]: https://slides.com/cheukting_ho\r\n  [5]: https://www.papercall.io/speakers/cheukting-ho\r\n  [6]: https://twitter.com/cheukting_ho\r\n  [7]: https://www.linkedin.com/in/cheukting-ho/"
    },
    {
        "title": "Dictionaries, behind the scenes",
        "name": "Gisela Rossi",
        "abstract": "Have you ever wondered how Python's dictionaries work behind the scenes? \nFor the curious minds: we will unveil some of the magic, things ranging from performance to security, and some surprises.\nFor the pragmatists: we'll see cases where understanding the internals can have practical applications",
        "description": "You have been working with Python dictionaries for a while and you feel comfortable using them, now you're interested in taking the next step. With this talk you'll get a look at how dictionaries work on the inside, things ranging from performance to security, and some surprises. You'll also learn how to personalise your dicts, for example modifying the hash function (and the risks of doing it). You will leave knowing your tools better and loving python dicts even more.",
        "bio": "Gisela Rossi got her Bs. and Ms. in Computer Science with focus on research. She is now a software engineer that has been working with Python for 3 years and believes it is a beautiful and uncluttered language. Gisela loves order and will MariKondo your desk and code if you let her. She is passionate about improving diversity and inclusion in the industry and that is why she became co-leader of PyLadies London. Other interests include oil painting, going to the gym and napping with her kitten."
    },
    {
        "title": "Build your Python Extensions with Rust!",
        "name": "Paul Ganssle",
        "abstract": "Looking to write compiled Python extensions, but don't want to worry about memory safety bugs or reference counting? You can write it in Rust! In this talk, I'll go into details about how to write Rust extension modules, and the trade-offs between different approaches you can take.",
        "description": "When your Python needs to be fast, one powerful tool is the ability to write compiled extension modules. Normally this is done using the C API, but that requires managing reference counts and memory allocation and is nearly impossible to do *correctly* for non-trivial programs. In this talk, we'll look at how you can write extension modules in Rust - a memory-safe systems programming language that is increasingly popular as a replacement for C and C++, and the [most loved language in the Stack Overflow developer survey 4 years running](https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages).\r\n\r\nThis talk will focus on `pyo3` and `milksnake`, two popular libraries that provide very different approaches for writing Rust extensions; it will cover a basic introduction to the libraries, and compare their relative strengths and weaknesses. These will also be compared to C and Cython extension modules from a performance, safety and maintainability perspective.\r\n\r\nThis talk assumes some *basic* familiarity with extension modules. It is aimed at Pythonistas who are interested in Rust and at people who currently write extension modules and are looking for a safer alternative to the C API. Familiarity with the syntax and basic concepts of Rust is helpful, but the talk should be understandable even for Rust beginners.",
        "bio": "Paul Ganssle is a software developer and open source contributor and maintainer of the python-dateutil and setuptools libraries. He lives in New York City and is interested in programming, languages, wearable electronics and sensors."
    },
    {
        "title": "Integrating Systems Using Python with pandas",
        "name": "Michelle Nabavian",
        "abstract": "pandas is more than a data science tool. Its features readily solve the complexities of system integration. We use pandas to create an integration layer that abstracts the interface and data model of end-points, allowing independently-designed new and old systems to inter-operate without redesign.",
        "description": "The problem we aimed to solve broadly was to (1) replace the data inputs of a newly acquired product and software and to (2) replace this system with a more modern one in phases. We had already accomplished being able to run this acquired system on our hardware, and it was backing a critical product in production. Hence, an additional requirement was to (3) ensure the production system continued to run by limiting any large-scale changes to its interfaces or data model.\r\n\r\nThe destination interface required a file input. We created a Python service to translate acquired data from our modern system into files in the form required by the destination systems. The Python code read file configurations that were easy to create. Python was useful and new configurations did not require re-linking code to deploy them.\r\n\r\nWe also needed to deliver different variants of the same data, joined or concatenated data, or pivoted data to different end points. End-point applications had different expectations. We were able to use pandas to solve all of these data transformation problems. We did not need to change the system where we acquired the data. And we could use either a database or an existing file as a data input. We then used pandas to suck the data into an in-memory data structure to which it was easy to apply merges, concatenations and pivots. The result was that neither the producer of the data or the consumer of the data needed to make any concessions for the other\u2019s data model or interface.\r\n\r\nIn conclusion, the pandas feature set enabled us to build an integration facility to connect and transfer data between diverse systems with different requirements related to the form and content of the payload \u2013 without the producers and consumers of the data needing to change or be aware of the other\u2019s data model or interface.\r\n",
        "bio": "Michelle Nabavian is an engineering team lead at Bloomberg. She has 16 years of experience in the financial data industry, during which time she has developed trading applications, as well as a financial index production system. In all of her projects, Michelle has understood that live production systems are usually integrated systems, whether it be for the reason of integrating different applications, or a new system with a legacy counterpart. Michelle is interested in building solutions for systems that eliminate risk and greatly improve the ability to develop code quickly without impacting other systems in an ecosystem."
    },
    {
        "title": "Making Multiple Inheritance not work in Python",
        "name": "Andy Fundinger",
        "abstract": "This talk is a destructive examination of the workings of Python's inheritance model. We'll learn how it works by breaking it. After starting with a discussion of how we got to where we are, we'll then move on to the hooks that Python gives us to interact with it.",
        "description": "This talk is a destructive examination of the workings of Python's inheritance model. We'll learn how it works by breaking it. After starting with a discussion of how we got to where we are, we'll then move on to the hooks that Python gives us to interact with it. These include using the metaclass to alter the class during construction, as well as using the \\_\\_init_subclass\\_\\_ and \\_\\_subclasscheck\\_\\_ hooks.\r\n\r\nParticular examples will include:\r\n\r\n* Implementing interfaces in Python\r\n* Turning inheritance off in favor of explicit reuse\r\n* Simplifying classes by disabling a selection of features you don't wish to use\r\n\r\nWhile none of these are meant to be particularly useful implementations, they make good use cases to show the machinery.",
        "bio": "Andy Fundinger is a senior engineer at Bloomberg, where he develops Python applications in the Data License group and supports Python developers throughout the firm through the company's Python Guild. Andy has spoken several times at PyGotham, as well as other conferences such as QCon, PyCaribbean, and EuroPython.\r\n\r\nIn the past, Andy has worked on private equity and credit risk applications, web services, and virtual worlds. Andy holds a Masters of Engineering from Stevens Institute of Technology. In his spare time, Andy is a maker who works on Internet of Things (IoT) projects and teaches classes at MakerBar in Hoboken, NJ."
    },
    {
        "title": "Strongly typed python",
        "name": "Gintare Urbone",
        "abstract": "Love to share my recent python experience on how to DIY: strong typing, strict validation, documentation and syntax control in python. Working on any client facing python library or API, this is very useful subject. Python being so flexible and forgiving, do create fun challenges in this area.",
        "description": "### Strongly typed python\r\n\r\n#### Background\r\nCreating a core banking platform with python as one of the main backend languages is as much fun and rewarding task as challenging one. I would like to talk about very interesting topic - which I called `Strongly typed python`. I will be partially basing the story on my experience working in `fintech` startup as well as my personal projects. This topic is important for anyone who is building more strict and solid python library or python based templating language. \r\n\r\n#### Content \r\nIn the talk, I will go through tips and ideas on how one can use:\r\n\r\n  * meta-classes, \r\n  * sub-classing,\r\n  * decorators \r\n  * and other python provided patterns\r\n\r\nin their python libraries to make the lib-client API more strict and robust. I will share main benefits and lessons learned from hardening the user exposed python library, such as auto-generated documentation, validation, limitation and security. \r\n\r\n#### Target audience\r\nThis topic is very important for anyone building customer facing python library or python based templating language.",
        "bio": "#### My background\r\nHello! I am Gintare. I am a python developer but before I realized that I love coding I had to get a bachelor degree in physics and masters in finance. Now, I have 7 years of software engineer experience, mostly coding in python. I am currently working in a company called `Thought Machine` as core banking system backend engineer. I came to the start-up from experience in large corporate banks: Barclays and Morgan Stanley. \r\n\r\n#### Me and python\r\nI am active member of various `Women in Technology` groups, speaking in `PyLadies` meetup, `Women of Silicon Roundabout` conference and similar events. I am also organising my first `Django Girls` workshop this May. Love python programming language, its community, the open-source and sharing, also unicorns and rainbows! :)\r\n\r\n#### Me without python\r\nI my spare time I love travelling and challenging myself. Been to many countries so far, including Japan, Australia, USA, Thailand, Malaysia, most Europe etc. Did various challenges, such as running, mountain climbing, triathlon etc. Planning to hike Mount Everest Base camp in April this year."
    },
    {
        "title": "Inside the Kitchen",
        "name": "Daniel Moisset",
        "abstract": "Once a year, a new Python version descends from the heavens, and it's nicer and better than the previous one. Well... not from the heavens; there's a lot of people doing immense amounts of hard work to achieve that. How does that work? How are decisions taken and who does that? Come and find out!",
        "description": "Python is a huge open source software project, and ensuring it evolves and get better and at the same time not too complex is a massive undertaking from contributors around the world. This talk will try to tell you about how that process works. You may find it interesting if you want to get involved, have ideas to propose, or are just curious about how this system that you use actually gets built. The talks will not focus much on the formal process to submit code or a language change proposal (which are thoroughly documented elsewhere), but more on the team dynamics, answering questions like \"is there people getting paid to work on Python?\", \"how are decisions made and who takes them?\", \"what kinds of changes are there?\", \"when should I write a proposal vs file a bug vs write an email at python-ideas vs talk to Guido at a conference?\", \"what kinds of ideas are more or less likely to be accepted?\" \"what are common causes of rejected ideas?\". I'm hoping that by the end of the talk the audience should have demystified a lot of what happens behind the scenes and help them get curious about getting involved and contribute.",
        "bio": "I've been programming Python for 18 years and involved in Open Source projects for 20. I've always been fascinated about the way in which software teams work, no matter if it's a small group in industry contexts or a huge open and distributed project. I've had the chance to try different ways of collaborating (occasionally succeeding) in the startups I co-founded. I enjoy being part of the nicest technical community I know, which is the Python community.\r\nWhen I'm not working or talking with my friends and wife about coding, I enjoy playing tabletop and roleplaying games, cuddling my cat, and learning to play the piano, badly.\r\n"
    },
    {
        "title": "TFW your country funds Open Source development",
        "name": "Riccardo Magliocchetti",
        "abstract": "During 2018 I've worked on Docs Italia, a platform to host the Italian Public Administration documentation. We didn't built Docs Italia from scratch but built it on top of Read The Docs. We saved a lot of work but did we contribute something back to the upstream community?",
        "description": "During 2018 I\u2019ve been a contractor for the Italian Digital Transformation Team working on docs.italia.it (Docs Italia), an Open Source platform to collect and share the Public Administration documentation. We didn't write Docs Italia from scratch though but built it on top of Read The Docs, the leading documentation platform for Python packages. We saved a lot of work by leveraging another open source project. Cool! Still Open Source software does not write itself and we managed to contribute back some value to the upstream project. In this talk I'll share what we did and what we learned.",
        "bio": "I'm a Pythonista, a software developer and a consultant from Torino, Italy. I'm contributing to Open Source since a few, contributing to both extremely popular and toy projects. I organize two local meetups: Torino Hacknight, to show people that Open Source software is not writing itself and Coding Gym Torino, a monthly gym to keep programming skills in shape. I like to go to the movies and I should read more books."
    },
    {
        "title": "Pandas for Fun and Profit: Using Pandas for Successful Investing",
        "name": "Daniel Goldfarb",
        "abstract": "Pandas is easy and fun to use; even a Python newbie can use it.  I tell the story of how, as a new Python developer, I quickly learned enough Pandas to be able test some hypotheses about financial markets.  After attending, you too may choose to use Pandas for fun and maybe profit.",
        "description": "During this talk, I tell the story of how, as a new Python developer, I quickly learned enough Pandas to be able test some hypotheses about financial markets.  I will demonstrate how I formulated the hypothesis, developed a test plan, gathered data, and tested the hypothesis.  Along the way, attendees will see common Pandas techniques for cleaning, converting and reshaping the data, generating new derived data, finding patterns / correlations, and visualizing data.  After attending this talk, you may choose to use Pandas to test your own hypotheses for fun (and maybe profit).\r\n\r\nThe audience for this talk is any level Python developer with little to no experience with Pandas.  Through this talk, attendees will learn what Pandas can do, and how it simplifies data analysis.  Attendees will also learn how to apply a number of basic Pandas techniques for cleaning data, slicing data, setting and using indices, calculating new columns, merging data sets, generating statistics, and visualizing results.\r\n\r\nOutline:\r\n\r\n * Introduction\r\n * The Hypothesis\r\n    * Stock ownership and Earnings\r\n    * The Price/Earnings ratio and what it means to analysts\r\n    * Hypothesis:  Low P/E represents a “bargain”  **-- How can we test this?**\r\n * Pandas Basics \r\n    * Series, Data Frame\r\n    * Indexing, loc, iloc, slice\r\n    * Utilities: read_csv, describe, apply, select, sort, transpose, merge, handling missing data\r\n * Testing Our Hypothesis: Preparing the Data\r\n    * Introduction to the data\r\n    * Cleaning the header; setting the indices\r\n    * Converting Price, P/E, and Dividends\r\n    * Converting Dates\r\n    * Calculating the average and standard deviation of P/E values \r\n    * Merging Dividend Data with the Price and P/E data\r\n * Testing Our Hypothesis: Calculations and Results\r\n    * Calculating Total Return (for various periods) and generating new columns\r\n    * P/E and Total Return Relationship\r\n * Conclusions\r\n    * Pandas is fun and easy – even for a newbie.\r\n    * Any data can be analyzed; the art is in gaining an understanding of the data and being creative in your \r\napproach to getting valuable information out of the data.",
        "bio": "Daniel has been a software engineer at Bloomberg L.P. for nearly three decades. He recently started coding in Python and quickly fell in love with using Pandas for data science.\r\n\r\nDaniel has extensive experience developing Trading Systems, Risk Analytics, and applications for analyzing Equities and Fixed Income securities. He has taught numerous engineering courses at Bloomberg. Daniel holds a Ph.D. in Biophysics from the University of Virginia, and was a CFA charter holder and member of the Chartered Financial Analyst Institute for more than 10 years. He is also the author of \"Biophysics Demystified.\""
    },
    {
        "title": "Lies, Damned Lies, and Statistics",
        "name": "Marco Bonzanini",
        "abstract": "We are exposed to the use of statistics in everyday life, but it is quite easy to fall victim of statistical fallacies. This talk will help you recognise these fallacies, so you can protect yourself from the misuse of statistics, ultimately becoming a better citizen.",
        "description": "Statistics show that eating ice cream causes death by drowning.\r\nIf this sounds baffling, this talk will help you to understand correlation, bias, statistical significance and other statistical techniques that are commonly (mis)used to support an argument that leads, by accident or on purpose, to drawing the wrong conclusions.\r\n\r\nThe casual observer is exposed to the use of statistics and probability in everyday life, but it is extremely easy to fall victim of a statistical fallacy, even for professional users.\r\nThe purpose of this talk is to help the audience understand how to recognise and avoid these fallacies, by combining an introduction to statistics with examples of lies and damned lies, in a way that is approachable for beginners.\r\n\r\nAgenda:\r\n-Correlation and causation\r\n-Simpson’s Paradox\r\n-Sampling bias and polluted surveys\r\n-Data visualisation gone wild\r\n-Statistical significance (and Data dredging a.k.a. p-hacking)",
        "bio": "Marco Bonzanini is a freelance Data Scientist based in London, UK. Co-organiser of the PyData London meet-up and co-chair of the PyData London 2018-19 conference. Python publications: Mastering Social Media Mining with Python (book, PacktPub, 2016) Data Analysis with Python (video course, PacktPub, 2017) Practical Python Data Science Techniques (video course, PacktPub, 2017)"
    },
    {
        "title": "Breaking pandas",
        "name": "Marc Garcia",
        "abstract": "pandas is becoming a de-facto standard for data manipulation and analysis in Python. But it's not alone, many other projects are being developed to help in this task. In this talk I will present some ideas on how to break pandas to have a healthier ecosystem.",
        "description": "pandas is more than 10 years old now. In this time, it became almost a standard for building data pipelines and perform data analysis in Python. As the popularity of the project grows, it also grows the number of projects that depend or interact with pandas.\r\n\r\nThis talk will cover this ecosystem of projects around pandas, mainly in the prespective of scalability and performance. Discussing for example how projects like Arrow are key for the future of pandas, or how Dask is overcoming pandas limitations.\r\n\r\nIn a first part, the talk will focus on pandas itself, its components, and its architecture. This will give the required context for a second part, that will explain related projects, how they interact with pandas, and what the whole ecosystem can offer to users.",
        "bio": "Marc Garcia is a pandas core developer and Python fellow.\r\n\r\nHe has been working in Python for more than 12 years, and worked as data scientist and data engineer for different companies such as Bank of America, Tesco and Badoo.\r\nHe is a regular speaker at PyData and PyCon conferences, and a regular organizer of sprints."
    },
    {
        "title": "Localisation Infrastructure in Yelp",
        "name": "Sherry Wang",
        "abstract": "If a company wants to sell product overseas, localisation is a must. \n\nA good localisation system saves huge amount of engineer work in daily life.\n\nIn this talk, I'll introduce how Yelp develops localisation infra that covers translation, currency/time and location localisation.",
        "description": "If a company wants to sell product overseas, localisation is a must. A good localisation system saves huge amount of engineer work in daily life.\r\n\r\nIn this talk, I'll introduce how Yelp's localisation infra tools, services and packages are built and accelerate development speed. Main topics will cover:\r\n1. Translation Service - a Yelp python service supports engineer use\r\n2. Machine translation service - a Yelp python service supports real-time translation\r\n3. Currency/Time package - Yelp python packages built on open source project\r\n\r\n",
        "bio": "I'm a Yelp engineer. I've worked in localisation infra and business search. This year I moved from San Francisco to London, hope to meet friends in public talk, and share my experiences in my work."
    }
]
