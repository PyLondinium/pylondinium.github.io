{
	"0": {
		"abstract": "Home-Assistant is an open-source python-3 platform home automation that is ideal for gathering, analysing and acting on data from a wide range of sources. Citizen-scientists can use Home-Assistant as their data backend, allowing them to integrate their project into their daily life.",
		"name": "Robin Cole & Oliver Crask",
		"title": "An introduction to citizen data science with Home-Assistant",
		"description": "Home-Assistant is an open-source, Python 3, home automation hub, typically running on a Raspberry Pi in the home. Home-Assistant can connect with with a huge range of sensors, switches and services, and the state of the system is continually logged to an SQL database on the hub. This combination of open-source software using standard tools, and broad integration with services and hardware makes Home-Assistant an ideal platform for conducting citizen data science projects.\r\n\r\nThis talk will begin with an introduction to Home-Assistant and highlight the features which make it ideal as a data backend for citizen science projects. The talk then presents a project on personalised air quality monitoring. This project uses a battery-powered\u00a0[low cost sensor](https://www.hackster.io/OxygenLithium/particulater-air-quality-monitoring-for-everyone-3caef2) to monitor air quality as well as other environmental variables. Sensor readings along with GPS data are transmitted back to Home-Assistant, and logged to the database. Home-Assistant allows a user to monitor, visualise and ultimately predict their daily exposure to pollution. Home-Assistant automations can then be used to trigger actions based on the data. For example flashing a red light in the users home when it predicts they may become exposed to a higher than average level of pollution. In the talk Q&A it is anticipated that the audience will raise their own challenges in their citizen science projects and together we can explore solutions using Home-Assistant.",
		"bio": "Robin has a background in experimental physics, having completed a PhD at Cambridge on the topic of plasmonic waves. Fast forward a few years, and he makes a living designing and building satellites. This work involves rigorous design, testing and validation using both lab based and computational techniques. Outside of work Robin is passionate about open source software development, and is a regular contributor to the Home-assistant project. Other interests include salsa dancing, and cooking fiery curries."
	},
	"1": {
		"abstract": "SQL is back! Well it never went away. Relational database systems development is accelerating more so than ever before. To keep up and access the latest features from your application, you have to write SQL directly, bypassing ORMs. But how do you do that without filling your code with SQL strings?",
		"name": "Huss EL-Sheikh",
		"title": "Party Like it's ANSI 1999: Using SQL from Python Applications",
		"description": "# The premise\r\nyou: Hey do you know SQL?\r\nteammate: Yeah totally, \"SELECT * FROM ....\", all that jazz\r\nyou: Cool, can you help me with this outer join? Trying to understand why it's so slow\r\nteammate: Woah, hold on there.... I'm not so great with the different joins types.\r\n(awkward pause)\r\nteammate: But sure let's see what we can do, and let's check Stack Overflow\r\n\r\nThus goes the (unfair) perception of application developers and SQL. It may be true that application developers know less of the vast Swiss-Army knife like capabilities of SQL, but quite frankly the need has not been that pressing. So many amazing tools exist to abstract the data persistence layer away into Python native object oriented patterns. Even self-declared SQLers use these tools to great effect. Letting us all focus on application related problems. ORMs and the like take care of moving things into and out of storage for us.\r\n\r\nBut what if you want to do some wild pre-computed sub-partitions of your data first, or you want to work with json data, or you want to do something that the ORM does not support yet, but the underlying database does? Sometimes, you just want some data out, as values, in your Python code. Especially with the explosion of Python being used in Data Science and Machine Learning activities, where the shape of your data is always changing, rigid object based data mapping makes it hard to move quickly, prototype and iterate.\r\n\r\n# So what?\r\nI hope to show you that you probably know more SQL than you think, and that it's really simple to interface directly with a relational database system through Python. Unlocking the latest features of your database, allowing you to do more in the database layer therefore alleviating some load on your Python code, and putting a lot of the data decisions back into your hands. Plus how a helping hand from tools such as SQLpy can let you do this in a Pythonic and *sane* way.",
		"bio": "Hi I'm Huss, CTO and co-founder of 9fin. I love Python and I love SQL. I wrote the library SQLpy to bring the two together in glorious harmony!\r\n\r\nBefore 9fin, I worked in Investment Banking Technology for 4 years. On teams building trading, risk monitoring and liquidity management systems. The common theme in all my different roles was working with SQL and databases every day. Before that I studied Aerospace Engineering, where I learned a hell of a lot about aeroplanes, and some stuff that would eventually become known as machine learning...who knew!"
	},
	"2": {
		"abstract": "In this talk, we present a general overview of the Jupyter interactive widgets framework and the main interactive visualization libraries that were built upon it. Then we dive into the latest developments by the Jupyter team, including the JupyterLab integration, the use of widgets outside of the notebook, and the support for other languages.",
		"name": "Sylvain Corlay",
		"title": "The Jupyter Interactive Widgets Ecosystem: Visual Interactive Computing in the Notebook and JupyterLab.",
		"description": "Project Jupyter aims at providing a consistent set of tools for data science workflows from the exploratory phase of the analysis to the sharing of the results. An area where Jupyter especially shines is the interactive widgets framework, which enables rich user interaction, including 2D and 3D interactive plotting, geographic data visualization and much more. Jupyter interactive widgets are useful for technical users at the exploratory phase of their research to more easily interact with the data and the computing resources. It can also help them produce interactive dashboards and applications usable by non-developers allowing them to interact with the models produced by the researchers without having to modify the underlying source code. In this talk, we present a general overview of the Jupyter interactive widgets framework and the main interactive visualization libraries that were built upon it. Then we dive into the latest developments by the Jupyter team, including the JupyterLab integration, the use of widgets outside of the notebook, and the support for other languages.",
		"bio": "Sylvain Corlay is an applied mathematician specializing in stochastic analysis and optimal control. He holds a PhD in applied mathematics from University Paris VI.\nAs an open source developer, Sylvain contributes to Project Jupyter in the area of interactive widgets and language kernels. Sylvain is a member of the steering committee of the project.\nBesides Jupyter, Sylvain contributes to a number of scientific computing open-source projects such as bqplot, ipyleaflet, xtensor and xeus.\nSylvain founded QuantStack in September 2016. Prior to founding QuantStack, Sylvain was a quant researcher at Bloomberg and an adjunct faculty member at the Courant Institute and Columbia University."
	},
	"3": {
		"abstract": "In this talk we will go through whole \u201cserverless\u201d thing: from decomposing app and its logic to microservices and further to smaller bits, i.e. functions to defining data flow through functions and building their fault-tolerant pipeline.",
		"name": "Denys Makogon",
		"title": "Applying serverless architecture pattern to distributed data processing",
		"description": "Serverless architectures refer to applications that significantly depend on \u201ccloud\u201d services (knows as Backend as a Service) or on custom code that\u2019s run in ephemeral runtime (Function as a Service or \u201cFaaS\u201d).\r\n\r\nTo application developers, \u201cserverless\u201d mean app where some certain logic of it is still written by the developer but unlike traditional architectures or microservices is run in stateless compute runtime that is event-triggered, may only last for one invocation, and fully managed by a cloud. Serverless helps developers to transfer responsibility of keeping their apps up and running as well as scaling out their workload capacity without involving DevOps/Ops as we got used to.\r\n\r\nIn this talk we will go through whole \u201cserverless\u201d thing: from decomposing app and its logic to microservices and further to smaller bits, i.e. functions to defining data flow through functions and building their fault-tolerant pipeline.\r\n\r\nMoreover, we will go through the demo that highlights key takeaways:\r\n\r\n* how to design scalable architecture without getting into troubles by hitting concrete bottlenecks\r\n\r\n* how to combine multiple programming languages into a single app\r\n\r\n* why Go and Python are the ones of the best programming languages designed exactly for serverless\r\n",
		"bio": "Software enthusiast focused on developing and designing platform and software as a service application for clouds. He\u2019s a principal software developer in Oracle, concentrating on product development along with bringing well-designed and production ready integration with clouds solutions, contributor to various open source projects, cloud-related technologies along having fun with IoT devices and photography.\r\nDenis is a regular attendee and speaker at OpenStack summits (Atlanta, Austin, Paris, Barcelona, Boston) and PyCon Hong Kong 2016, 2017, PyCon Italy 2018. co-author of OpenStack Application development, OpenStack Trove Essentials.\r\n"
	},
	"4": {
		"abstract": "Any production application requires good use of design patterns and this talk will be about popular design patterns/choices and their implementation.  The talk will also cover basics of metaclasses and be using metaclasses in some design choices practically.",
		"name": "Ramanathan R",
		"title": "Practical Python Design Patterns ",
		"description": "Design patterns & choices are an important aspect of any production application and guide the scalability, performance, and robustness of the application. In this talk, we will see some practical implementations of such design patterns.\r\n\r\nWe will see the implementation of some practical cases where these will be used.  The below is a rough structure of the talk.\r\n\r\n1. Introduction to metaclasses and their uses with an example (ABCMeta)\r\n2. Comparable and Hashable objects in Python\r\n3. Writing singleton, Bean (Java-like) and reusable pooled objects using Metaclasses in Python\r\n4. Efficient logging infrastructure using SRP principle.\r\n\r\nThese are some subtle things when taken care give a lot of benefit to a production application.",
		"bio": "I am a data science and machine learning enthusiast. I am a director and co-founder of Zentropy Pvt Ltd that primarily works on end to end implementations of data-science based projects. I have close to 11 years of industry experience and have been working in python for more than 4 years. Before finding Zentropy, I was working with a leading hedge fund for 10 years primarily in the middle and back office areas.\r\n\r\nI am also an active member of the Hyderabad Python community and had been one of the core team. I headed the sessions team in the Pyconf Hyderabad, 2017 and am a co-organizer in the Pycon India, 2018. I have given sessions on Python and data science in various local forums."
	},
	"5": {
		"abstract": "What is your capacity? Does your backend scale? Are you on the edge of an outage? Find out with locust.io, a Python based load testing tool. Locust.io is open source, battle-tested, extensible and can help you sleep better at night ahead of a big product release.",
		"name": "Ivan Matellanes",
		"title": "Load test your backend with locust.io",
		"description": "What is your capacity? Does your backend scale? Are you on the edge of an outage? Find out with locust.io, a Python based load testing tool. Locust.io is open source, battle-tested, extensible and can help you sleep better at night ahead of a big product release.",
		"bio": ""
	},
	"6": {
		"abstract": "Computers are getting closer to speak like humans. But can we even make them speak in particular ways, like as Trump or Shakespeare? In this hands on talk we will see how this is possible with the latest deep learning techniques combined with word embeddings and other advanced NLP technique.",
		"name": "Cheuk Ting Ho",
		"title": "Deep Learning with Keras : Building an AI that Talks like Shakespeare or Trump",
		"description": "In this talk, first we would introduce two neural network and machine learning mechanisms which in popular and widely used in NLP (natural language processing): Word Embeddings and Recurrent Neural Network. Word Embeddings is a way to extract the context of a word by \"learning\" its presence in a paragraph; while Recurrent Neural Network, including LSTM (long short-term-memory), enable us to \"train\" sequential data. After that, we will showcase how to implement these mechanisms in a neutral network. With that, we can \"build\" a machine to generate articles, plays or speeches in the style of the training corpus and have lots of fun.\r\n\r\nIn the first half of the talk, concepts of how Word Embeddings and LSTM works will be explained. Audiences will understand why this is essential in the field of NLP and why we are using it. In the second half, a code demo will be used to showcase how to implement these mechanisms. Through an example, audiences will learn how Keras is used together with Tensorflow and Python to build a sequential neutral network. We will showcase generating a paragraph using Shakespeare's play and another one using Trump's speech.\r\n\r\nThis talk is for people who have some experience with data science and understand the concept of how a neural network works, but would like to go deeper into the details of how does it applied to NLP to solve more complex AI problems. We used very simple code but did a complex task like text generation, that opens the door for a lot of people who wants to experiment with deep learning.",
		"bio": "After spending 5 years doing research in theoretical physics at Hong Kong University of Science and Technology, Cheuk has transferred her analytical and logical skills in natural science and built a career in data science. Cheuk is now a Data Scientist in Hotelbeds Groups which is one of the biggest worldwide wholesaler in travel business.\r\n\r\nCheuk constantly contributes to the community by giving AI and deep learning workshops, volunteering at Datakind for charities. At the same time participate open source projects like Pandas, Gensim and Dateutil. Cheuk has also been a guest speaker at University of Oxford and Queen Mary University of London. Believing in gender equality, Cheuk is currently a co-organizer of AI club for Gender Minorities to support Tech Diversity and Inclusion."
	},
	"7": {
		"abstract": "We all somehow feel that MicroPython is not quite the Python we know. During the talk I'll show you what the \"not quite\" actually means. I'll present a few cases I stumbled upon when connecting a small thermal printer to different MicroPython powered boards.",
		"name": "Micha\u0142 Ga\u0142ka",
		"title": "Micropython Gotchas",
		"description": "Micropython gets more and more attention in the IoT world. There are new hardware platforms appearing for which Micropython becomes a valid choice.\r\nSome time ago I bought a thermal printer for a solely hacking purposes, after running it with Raspberry Pi and Python I gave MicroPython a try. It resulted in dealing with differences between Python and it's micro-brother as well as differences between MicroPython implementations themselves and sometimes also with the hardware constraints. During the talk I'll show a few cases that I met and solved during my MicroPython journey.",
		"bio": "My name is Micha\u0142 Ga\u0142ka and I'm a software engineer. I've been programming in Python for 9 years.\r\nI currently work mainly on embedded software development for Harman. I also prepare and deliver Python training sessions around Poland in cooperation with a training company called Sages. \r\nI'm an active member of local Python User Group in \u0141\u00f3d\u017a.\r\nYou may learn more about me from my LinkedIn profile https://pl.linkedin.com/in/mgalka ."
	},
	"8": {
		"abstract": "Have you ever wanted someone else to write your test cases?  There's a library for that!\n\nYou declare a strategy for inputs - from 'an integer' to 'matching this regex' to 'Django model'; Hypothesis finds bugs and reports minimal failing examples.  Too good to be true?  Come see for yourself!",
		"name": "Zac Hatfield-Dodds",
		"title": "Escape from auto-manual testing with Hypothesis!",
		"description": "If you've ever written some tests, or discovered that tested code can still have bugs, this talk - and Hypothesis - is for you.  Hypothesis lets you write tests that should pass for every case... then finds bugs by generating inputs you wouldn\u2019t have looked for.  Even better, you get to save time by writing fewer (but more powerful) tests, so this process improves your productivity as well as your code!  I'll spend just one slide on the idea of property-based testing, then jump right in to the practicalities:\r\n\r\n- Write your first property-based test: example code and an overview of common tactics.\r\n- Describing inputs: from using and composing strategies, to defining your own or inferring them from other code\r\n- Use at scale: performance tips, debugging tools, and model checking an API\r\n- The code is not magic: your very short overview of Hypothesis internals past, present, and future\r\n\r\nYou'll be ready to find real bugs by half way through this talk; and by the last slide you'll be ready to use Hypothesis in ways we never imagined.  Finally, you can ask me questions about anything - testing anything from web apps to big data pipelines, Hypothesis in other languages, or even how to get involved in the project (with mentoring!) - before leaving to drag the world kicking and screaming into a new and terrifying age of high quality software.",
		"bio": "Hi!  I've been writing Python for around five years now, with a focus on open source tools for fun and TB-scale data analysis on Australia's national supercomputer.\r\n\r\nI currently work as a researcher in the College of Engineering and Computer Science at the Australian National University - studying autonomy, agency, and assurance in the context of data and artificial intelligence.  I also offer consulting on software correctness in Python for commercial and open source projects - especially around property-based testing, continuous deployment, and development process.\r\n\r\nOn weekends, I enjoy reading, cooking, eating, and hiking/climbing/swimming/doing anything far, far out of phone range!"
	},
	"9": {
		"abstract": "In this talk, I will discuss what GraphQL is, including the basic\nsemantics and syntax. We'll have a whistle-stop tour of the Python\nlibraries available, as well as a couple of illustrative examples.",
		"name": "Alex Chamberlain",
		"title": "GraphQL in Python",
		"description": "I love trying out new technologies to see if they're really worth the hype around them. There's certainly a lot of articles, conferences and tutorials about GraphQL, so is it really worth it? I think so! In this talk, I hope to inspire you to investigate GraphQL for your own use cases.\r\n\r\nI'll be covering some of the basics behind GraphQL, including its pros & cons and the resolver pattern. I'll give a whistle-stop tour of a few libraries that are available, then introduce an example server I've put together for others to learn from. We should have time for a quick demo too!\r\n\r\nSlides: [https://alexchamberlain.github.io/presentation-pylondinium-graphql-in-python/#/](https://alexchamberlain.github.io/presentation-pylondinium-graphql-in-python/#/)\r\nExample Server: [https://github.com/alexchamberlain/city-api/](https://github.com/alexchamberlain/city-api/)",
		"bio": "Hey, I'm Alex, an Engineering Team Leader for Cross Commodities Infrastructure and Applications at Bloomberg LP. I specialise in Python, but also use C++ and JS.\r\n\r\nThe team is responsible for the discoverability of Commodity entities. We use a series of Python UI and backend services to gather data from a range of sources, process it via a RabbitMQ pipeline, and store it in a collection of Postgres, Solr and Redis datastores.\r\n\r\nI'm passionate about trying new technologies and figuring out how to introduce them to the team."
	},
	"10": {
		"abstract": "Learn how to build a snow globe that sounds an alarm and flashes a red alert when intruders are about. Me and my six year old daughter designed and built this project to have fun with friends and learn a bit about computers along the way.",
		"name": "Marwan Al-Sabbagh",
		"title": "Snow globe intruder alert system",
		"description": "Adafruit\u2019s [Circuit Playground Express](https://www.adafruit.com/product/3333) is a fantastic $25 computer packed with sensors, buttons, LEDs and a little speaker. Add this [DIY Snow Globe Kit](https://www.adafruit.com/product/3722) and some [Conductive Thread](https://www.adafruit.com/product/641) and we have the makings of an ingenious Snow globe intruder alert system. All written in python using a simple text editor without the need for any special software, drivers or soldering.\r\n\r\nThe globe has a rainbow mode that randomly fades different colors in and out and an alarm mode to detect intruders. Modes can be switched by giving the globe a tap which it detects with it\u2019s motion sensors. Once in alarm mode the globe will flash green until an intruder steps on the conductive thread which will sound the alarm and flash the globe red.\r\n\r\nThe Circuit Playground was used to teach my six year old daughter the differences between computer inputs and outputs and how to issue commands to computers using the Python REPL. She learned about the different frequencies of sound waves by calling the beep function with different frequencies. This opened up the topic of the hearing range of humans compared to other animals like dogs. She then learned to set the color of each of the ten NeoPixel LEDs into a rainbow pattern by calling the light function multiple times with each color and position. We explored how any color can be displayed as a combination of red, green and blue by using a digital microscope to see these three LEDs change with different colors. \r\n\r\n\r\nThis talk will cover:\r\n\r\n1. Tour of the Circuit Playground Express\r\n2. Assembling the snow globe\r\n3. The rainbow and alarm code\r\n4. REPL sound and light with a six year old\r\n5. Troubleshooting tips\r\n\r\n",
		"bio": "I'm a passionate Python developer living on the sunny island of Bahrain. I've been a speaker at Python conferences before and ran the Bahrain Linux User Group for five years. During that period I was a regular speaker at the groups monthly meetups. I\u2019ve taught courses in python programing and computer networking to both students and working professionals. \r\n"
	},
	"11": {
		"abstract": "In the 21st Century, computers are ubiqitous, but too many young people are passive consumers of technology. We need to shift understanding from consumers, to users, to creators of content in order to prepare young people for the workplace.",
		"name": "Cat Lamin",
		"title": "Why should kids learn to code and how can we help?",
		"description": "In the 21st Century, computers are ubiqitous, but too many young people are passive consumers of technology. We need to shift understanding from consumers, to users, to creators of content in order to prepare young people for the modern workplace.\r\n\r\nFind out about the problems faced by teachers trying to support the teaching and learning of coding and computer science and learn how you can contribute and support them. Understand the importance of introducing fundamental coding skills to all students and why schools around the world are taking up computer science as a core subject.\r\n\r\nConsider that some of the most popular jobs that exist today didn't even exist five years ago so how do we prepare our students for the jobs of the future?",
		"bio": "Tinker, tailor, soldier, spy\u2026 or something like that.\r\n\r\nUntil 2014, my entire goal in life was to become a successful primary school teacher, but now all of that has changed and since September 2016, I\u2019ve left the classroom to become an independent consultant sharing my  knowledge and understanding of computer science with other teachers\u2026\r\n\r\nMy passion is to share my knowledge and enjoyment of computing science and coding and I am determined to help people one way or another \u2013 you can find me at events involving sharing of ideas or else sharing my love of all things Raspberry Pi so please feel free to stop me for a chat. I want to make it clear to my fellow teachers that anyone can code and it\u2019s really not as scary because I absolutely love it when I see that spark of excitement for the first time on a teacher\u2019s face! I started from almost no knowledge whatsoever and I\u2019ve found my passion for it so I really want to give that back to others so that they can enjoy it too.\r\n\r\nI\u2019m available for independent work which, in the past, has included working as a facilitator for the Raspberry Pi Foundation\u2019s free CPD, Picademy, as well as working for the National Stem Centre in York and writing resources and articles, which has included a K-5 scheme of work for introducing computer science for a Canadian independent school group, called Maple Bear. As part of my work for Maple Bear, I have spent time in Brazil training teachers in computational thinking and I\u2019ve also delivered training in both Argentina and the US."
	},
	"12": {
		"abstract": "Our artistic, creative nature is what has fuelled the human evolution. However today, there is a misconception of how technology is making humans indolent. Instead technology, especially python programming with its reach in AI, can empower humans to express themselves artistically like never before.",
		"name": "Aparna Krishnakumar",
		"title": "Delve into Art and Creativity with Python",
		"description": "Around 2 million years ago, the primitive man started on the journey of evolution. They made tools out of stones, houses out of wood, food out of the wilderness. They imagined, innovated and created. Suddenly there was civilization, there was commerce. People were interested in more than just day-to-day functioning but also in something called art. There were paintings, there was music, dance, drama.\r\n\r\n Fast forward to the 1990\u2019s with the onset of technology and the world-wide-web. From then to now, we have had Wifi, Google, Artificial Intelligence, AR/VR, Cryptocurrency. As Technology is getting more exciting, the misconception about it making humans a dull, monotonous species is also increasing.  Instead, technology serves to be the medium through which creative thoughts are made into a reality. \r\n\r\nThis talk aims to inspire both novices and professionals in the field to create. It will cover the unexplored applications of python programming in art and creativity by harnessing simple programming and mathematical techniques as well as by creating Artificially Intelligent Systems. The talk will cover a wide range of examples from bringing past artists back to life, integrating the cultures of the world with programming as well as examining real-life applications of artistically aimed python programming in music videos, museums and much more. Moreover, it will also cover the speaker\u2019s role in the field and new, exciting areas to explore and prospective problems to solve to make humans a more creatively able and remarkable species. ",
		"bio": "My name is Aparna Krishnakumar. I am a sophomore at SRM University Chennai, India studying Computer Science and Engineering.\r\nAs someone who agrees with Robin Williams in 'The Dead Poet Society' about how the human race is filled with passion and an inherent need of art in their lives, I'm a bigger fan of Francois Chollet's Wysp than his Keras . I believe that technology can be used by humans to not only improve their skills but also express themselves artistically with more ease.\r\n \r\n I use python programming for Machine Learning , Deep Learning and Image Processing , to continuously come up with new hacks that explore the creative applications of Artificial Intelligence and their uses to make society a better place. A few of my hacks include an AI personalised greeting card generator, a video streaming service for the disabled and a tourism recommendation system based on emotion. The fact that I get to explore the math involved in these algorithms is an added bonus. I have won the Innovation Award in the Largest Hackathon in the World - the Smart India Hackathon 2017, organised by the Government of India.\r\n\u200b\r\nWhen I'm not obsessing over the optimization of a model,  I enjoy watching rare, Noah Baumbach- like Indie films and exploring the fusion of different music forms like jazz with Carnatic Music. I am also a professional Bharatnatyam Dancer and occasionally perform across India.\r\n \r\nYou would probably find me in the corner of a cafe, drinking a cup of coffee and listening to the 'Best of 2000's Alternative' playlist on my phone. There are few things more beautiful than back-propagation. Coffee is one of them. "
	},
	"13": {
		"abstract": "One of the most powerful and compelling types of AI is computer vision, which you must have surely experienced without knowing it. In this talk, we are going to look at what it is, how it works and why it is awesome !",
		"name": "Daniel Ajisafe",
		"title": "How computer vision works and why it's so amazing!",
		"description": "Staying up to-date with lots of technical terms and tags associated with all kinds of latest technologies today has suddenly become a full-time job. Amongst the most hyped is unarguably artificial intelligence (AI) which has become a household name that covers every technology that allows machine to \"think\" by processing data on its own.\r\nOne of the most powerful and compelling types of AI is computer vision, which you must have surely experienced without knowing it. Imagine a world where robots are sent into the forest to cut down trees, guide water delivery, search for lost hikers, earthquake or shipwrecked survivors or even cut tomatoes in the kitchen. That world is becoming a reality and it's only unfair if you are left out.\r\nIn this talk, we are going to look at what computer vision is, how it works and why it is awesome !",
		"bio": "I am currently the team lead for the data science and AI community in my school and also an AI saturday city ambassador for my state that runs for 16 saturdays consecutively using fast.ai curriculum, stanford computer vision course and university of berkeley deep reinforcement learning. My research interest is at the intersection of computer vision and natural language processing using deep learning. My goal is to solve problems related to health using AI."
	},
	"14": {
		"abstract": "Did you know the role women have played in the Python community worldwide? Elissa Shevinsky is documenting the brilliant contributions of women & other under-represented people. She interviews both established and emerging leaders, and will share their insights on what's exciting in Python in 2018.",
		"name": "Elissa Shevinsky",
		"title": "Secret Histories: The Women of Python",
		"description": "Did you know the role women have played in building the Python community worldwide? Elissa Shevinsky interviewed both established and emerging leaders in the Python community, and will share their insights on what is most exciting in Python in 2018. This is an opportunity to hear insights from other community members, and to acknowledge their contributions.\r\n\r\nShevinsky is documenting the contributions of women and under-represented people in the Python community, and continuously updating this talk as new people and interviews are added to the slides. Shevinsky is Editor of the anthology \"Lean Out: The Struggle for Gender Equality in Tech and Startup Culture.\"",
		"bio": "Elissa Shevinsky is a serial entrepreneur, and a Web Security Advocate at Aptible. Shevinsky helped launch Geekcorps (acquired), Everyday Health (IPO) and Brave ($35M ICO.) Shevinsky was also the founder of Glimpse, an end to end encrypted messaging application. Her first book is \"Lean Out: The Struggle for Gender Equality in Tech and Startup Culture.\" Her second book, part of a series on the History of the Internet, is overdue to her publisher at INSTAR Books. "
	},
	"15": {
		"abstract": "MicroPython has been around for almost five years and it's used by Makers, Educators and Software Developers. Since 2015 the ESA is funding further development to make MicroPython more robust for critical embedded systems.  Learn how MicroPython is used to make devices reliable and energy efficient.",
		"name": "Christine Spindler",
		"title": "MicroPython used in industrial applications",
		"description": "MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. It was created by the Physicist Damien P. George in 2013.\r\n\r\nThis talk will focus on how MicroPython is used in product development for industrial applications.  Besides two products that use MicroPython for their System Architecture, it shows how Product Certification was made easier, why MicroPython was preferred instead of using a traditional Operating System for the embedded system and why Embedded Software Developers choose MicroPython instead of C/C++.\r\n\r\n## Outline\r\n* What is MicroPython?\r\n* Low Power & Low Footprint\r\n* Benefit of Scripting Languages in embedded systems\r\n* Mixing code! Assembler, C or MicroPython?\r\n* MicroPython cuts Product Development Process into half\r\n* MIT license\r\n* MicroPython used in real-world applications \u2013 examples\r\n* Demonstration\r\n* Questions",
		"bio": "Christine has been with the MicroPython team since the beginning of 2016. She is responsible for production and logistics at George Robotics Ltd. \u2013 the company behind MicroPython. She is also involved in Project Management for ongoing Product Development that uses MicroPython for the Systems Architecture.\r\nBesides a degree in economics she holds a B. Sc. In Electrical Engineering. Her final thesis focused on Ultra-Low-Power applications for the Internet of Things."
	},
	"16": {
		"abstract": "We all want to know whether our product works for the user. In this talk, I'll show you a framework for developing system-wide user-level automated-tests using Robot Framework with more-exhaustive test inputs that to Hypothesis. It won't fine all your bugs, but it'll certainly help.",
		"name": "Donal Mee",
		"title": "Can you boost your acceptance tests?",
		"description": "#What is the main topic of your talk?\r\nThe main topic is software testing. The talk will present two popular python test-frameworks in combination: RobotFramework and Hypothesis. If you want to write code to mimic the actions of a user, Robot is a good choice. But, you can use Robot with Hypothesis to convert static examples into much more comprehensive tests. Hypothesis provides a way to produce test inputs by describing rules to generate test inputs. We can combine Hypothesis and Robot to produce tests that could - in theory - replicate all the describable uses your system.\r\n\r\n#Who is this talk targetting?\r\nThis talk will be most impactful for software testing functions. The topic isn't difficult to understand, and when you hear about it, you'll wonder why we haven't always been doing this. The approach falls within Test Driven Development and a particular sub-field, Behaviour Driven Development. Property-based testing helps to catch bugs that you wouldn't think to test. Or, at least, it speeds up the process of catching these bugs because it takes some of the burdent of producing interesting test examples from the developer. \r\n\r\n#Why will the talk be interesting for the audience?\r\nBugs are beneficial! The talk motivates for a better approach to software development. It's time to stop blaming developers for bugs and to adopt a positive attitude towards bugs. I'll explain why and I'll show you a technique for combining more exhaustive test data with tests that mimic a user of your system. ",
		"bio": "Lawyer by background, tester by trade. I use Python 3 to produce better code. "
	},
	"17": {
		"abstract": "One of the Python's most powerful mechanisms, attribute access control, is not widely understood. The talk will  explain the opportunities that users have to take advantage of the mechanism to write safer, more efficient and generally more effective code.",
		"name": "Gordon McQuarrie",
		"title": "Dot Dash Dash - A Guide to Effective Attribute Access Control",
		"description": "The main topic will be the Python mechanism for effective attribute access control.\r\nI propose to show all the opportunities that a Python developer has for producing more efficient and safer code through attribute access control.\r\nThe target audience is developers, writing or maintaining classes,.\r\nThe talk will allow me to explain in a straightforward way a mechanism that has many powerful uses, but tends to confuse many people.\r\n\r\nOutline\r\n- the default mechanism for attribute access\r\n- the use of __getattribute__ vs __getattr__\r\n- accessing class attributes via object attributes\r\n- the use of the descriptor protocol\r\n",
		"bio": "Computer Science graduate.\r\nResearch Assistant (4 years)\r\nSoftware developer for embedded systems company(6 years)\r\nTechnical Marketer/Trainer for  major semiconductor manufacturer(4 years)\r\nFreelance I.T. trainer for Bloomberg, Morgan Stanley, Sun Microsystems ..."
	},
	"18": {
		"abstract": "What's the first data structure that comes to your mind? Lists of course!\nBut, Do we know how those lovely lists work? Is there any difference between a list and an array? What algorithm order Python's list?\nSo many questions for a tiny data structure so widely used. Let's learn together about it!",
		"name": "Maite Gim\u00e9nez",
		"title": "List me your virtues",
		"description": "Data structures are the building blocks of mostly each piece of code that we can write. \r\n\r\nLuckily, CPython developers have come up with ingenious solutions to make the lists efficient in the standard library and release us from the tedious work of allocating and releasing memory on the bare metal. But, aren't you curious about how they work in a dynamic language like Python?\r\n\r\nIn this talk, we are going to dig deep and learn about how lists work in Python. We will learn about topics such as, the complexity that involves appending new data efficiently, how lists can store different data types, what algorithm is used to sort lists.\r\n\r\nAs a bonus track, we will briefly talk about how third-party packages like NumPy can be an excellent replacement, in some cases, of our beloved lists. ",
		"bio": "Oh, hello! I'm Maite Gim\u00e9nez, and one of my favourite movies growing up was Pulp Fiction, and I loved Mr.Fox, the kind of person that you call when you need to solve a problem. As an adult, I'm like to think of myself as a nicer, shorter version of him because I solve problems (without the mafia part). \r\nI'm a PhD. Student at the Polytechnic University of Valencia where I work in Deep Learning models for Natural Language Processing.\r\nAlso, I am a board member of the Spanish Python Association and a proud member of the Pyladies, and I'm very active in my local community.\r\nI'm a BDFL aspirant; I love open source, teaching and cats. \r\nEmpathy is my superpower; I know, it's the worst superpower ever. \r\nAllons-y, Alonso!\r\n"
	},
	"19": {
		"abstract": "Traditional techniques to tune the hyperparameters of machine learning models provide no way of incorporating prior knowledge of model performance at given hyperparameter settings. I show that Bayesian Optimization can be used to rectify this, presenting a walkthrough of tuning a CNN model in Keras.",
		"name": "Niall Turbitt",
		"title": "Tuning the knobs of neural networks using Bayesian Optimization",
		"description": "Choosing the best hyperparameters for machine learning models is sometimes considered as more of an art than science. For most machine learning practitioners, mastering this art of tuning hyperparameters requires not only a competent background in machine learning algorithms, but also extensive experience working with real-world datasets. Most machine learning algorithms present a variety of hyperparameters to tune, and in the case of neural networks and deep learning models, the list of potential hyperparameters to adjust can increase exponentially. As such, deep learning models are notoriously tricky to optimally tune, where thorough exploration of architectures and hyperparameters is imperative.\r\n\r\nGrid search and randomized search methodologies are traditionally used to tune model hyperparameters, however they are costly approaches and incorporate no notion of how trials of previous hyperparameters have performed. Bayesian Optimization is one such approach that forms knowledge about the relation between the hyperparameter settings and model performance in order to make a smarter choice for future parameter settings. \r\n\r\nUsing Zalando\u2019s Fashion MNIST dataset, which comprises of 60,000 clothing images, I present the use of Bayesian Optimization to tune the hyperparameters of a convolutional neural network in Keras.",
		"bio": "My name is Niall Turbitt and I currently work as a machine learning engineer at Argos, having joined the company last year.  Following the completion of my Masters degree in Statistics in 2015, I moved to San Francisco to work as a Data Scientist for Lucidworks, an enterprise search company, where I worked on projects ranging from natural language processing to recommender systems. At Argos I work under the forecasting and replenishment team, developing demand forecasting and pricing machine learning models.\r\n\r\nI am an avid musician, playing guitar, piano and drums, and as such can bring a touch of artistic flair to my talk!"
	},
	"20": {
		"abstract": "The purpose of this talk is to address a problem that seems to be unfortunately common when dealing with metaclasses: no matter how we explain the topic, it always remains unclear what metaclasses are ... or we forget it in ten minutes. The examples used to illustrate such an arcane thing are almost inevitably cryptic, solving in complex ways elaborate problems that we have never encountered in our day-to-day life. Do they really have any practical utility? Why should I care about them, if I am average Python level?",
		"name": "Pablo Galindo",
		"title": "Metaclasses exactly what and (especially) why",
		"description": "What we are going to do in this talk is to start by describing a problem: we want to implement the same behavior (for example, logging) in all methods of my class. To do this we have several options, in increasing order of complexity: (a) copy and paste the same line of code in all methods, (b) use a decorator in each method and (c) use a class decorator. But no solution is ideal, and the lack of elegance causes laments and tears. It is a problem like this when metaclasses have a function, and we appreciate that they are in our repertoire of Python skills. Understanding why we are missing out, we will proceed to explain how to create our own metaclass: first by briefly reviewing the `__new __ ()` e `__init __ ()` function for normal classes, and then showing how to do the same with metaclasses. We will illustrate this with several examples, using metaclasses to add to our code auto-logging or just-in-time compilation functionality, as Numba does. Finally, and as a curiosity, we will continue to higher levels of abstraction, learning what are the _hooks of metaclasses and what the `.pth` files are useful for.",
		"bio": "I work as Software Engineer at Bloomberg LP, my background is theoretical physicist and I am a bad influence in general. My day to day work consists of defining how Python is used in the company while developing internal software infrastructure. I spend my free time contributing to CPython, optimizing code and coming up with bad ideas that no one in their right mind would want to run in a production machine. I also have a cat, but he does not code."
	},
	"21": {
		"abstract": "We rarely think about the dot \".\" between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python.  This talk will include the commonly known functions, (__dict__, __getattr__, etc), but especially focus on the Descriptor Protocol.",
		"name": "Andy Fundinger",
		"title": "The 8 things that happen at the \".\" between an object and the attribute",
		"description": "We rarely think about the dot \".\" between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python. This talk will explore the details of what happens, how the descriptor protocol works, and how it can be used to alter the Python object model.\r\n\r\nActions to be explored:\r\n1.  The instance __dict__ is checked.\r\n2.  The class __dict__ is checked.\r\n3.  The base classes __dicts__ are checked.\r\n4.  __getattr__ runs.\r\n5.  __getattribute__ runs.\r\n6.  The __get__ method on the object in the class __dict__ is called.\r\n7.  The object in the class __dict__ is checked for a __set__ method.\r\n8.  raise AttributeError\r\n\r\nMost of the talk will focus on 6 & 7 to explain the Descriptor protocol. Examples will include altering method binding and property behaviors, as well as supporting method implementation reuse via Descriptors.",
		"bio": "Andy Fundinger is a senior engineer at Bloomberg, where he develops Python applications in the Data License group and supports Python developers throughout the firm through the company's Python Guild. Andy has spoken twice at PyGotham, as well as other conferences such as QCon, PyCaribbean, and SaltConf.\r\n\r\nIn the past, Andy has worked on private equity and credit risk applications, web services, and virtual worlds. Andy holds a Masters of Engineering from Stevens Institute of Technology. In his spare time, Andy is a maker who works on Internet of Things (IoT) projects and teaches classes at MakerBar in Hoboken, NJ."
	},
	"22": {
		"abstract": "Type systems are among the hottest toys in town, with a new typed language transpiling to JavaScript every week. But isn't that incompatible with Python's fast, productive, dynamic typing?\n\nIn this talk, I'll introduce these things called 'types', and motivate and demonstrate their use in Python.",
		"name": "Oliver Ford",
		"title": "Types: what they are, why to care, and how to use them in Python",
		"description": "This talk is aimed at the programmer who's familiar with Python, but has not or has merely heard of 'mypy' and 'type annotations'; no experience of statically typed programming languages will be assumed.\r\n\r\nAfter briefly introducing the origin of types and glossing over the theory of type systems and why we have them, I'll attempt to motivate their use in Python - a language whose user's perhaps proudly eschew static typing and enjoy making `int`s look like ducks. I'll then dive right in to practical examples of typing Python code, from callables and dictionary values, to generators and metaclasses - on the assumption that the programmer is now convinced that doing so would be a very good thing.",
		"bio": "Oliver Ford is a recent graduate of Electronic & Information Engineering at Imperial College London, where for his final project he implemented an HTTP/REST client for Rust that uses the language's type system to make compile-time guarantees about the correctness of the client code's API use. He now works on web services for the IoT at Arm, where he promotes the use of mypy and typing in Python, and jokes daily that something ought to be re-written in Rust. He likes Python really, he promises."
	},
	"23": {
		"abstract": "This talk is a deep dive into time zones, one of the most notoriously tricky concepts in programming. Every time I give some variation of this talk, someone tells me that something they learned made them go and fix time zone-related bugs that they had *in production*.",
		"name": "Paul Ganssle",
		"title": "Working with Time Zones: Everything You Wish You Didn't Need to Know",
		"description": "Time zones are complicated, but they are a fact of engineering life. Time zones have [skipped entire days](http://www.bbc.com/news/world-asia-16351377) and repeated others. There are time zones that switch to [DST twice per year](https://www.timeanddate.com/time/zone/morocco/casablanca). But not necessarily every year.  In Python it's even possible to create datetimes with non-transitive equality (`a == b`, `b == c`, `a != c`).\r\n\r\nIn this talk you'll learn about Python's time zone model and other concepts critical to avoiding datetime troubles. Using `dateutil` and `pytz` as examples, this talk covers how to deal with ambiguous and imaginary times, datetime arithmetic around a Daylight Saving Time transition, and datetime's new `fold` attribute, introduced in Python 3.6 ([PEP 495](https://www.python.org/dev/peps/pep-0495/)).\r\n",
		"bio": "Paul Ganssle is a software developer at Bloomberg and maintains the library python-dateutil. He lives in New York City and is interested in programming, languages, wearable electronics and sensors.\r\n\r\nExpressions of opinion do not necessarily reflect the views of his employer."
	},
	"24": {
		"abstract": "During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to re-use type hints for much more than just type checking.",
		"name": "Bernat Gabor",
		"title": "Type hints inside the snake pit",
		"description": "Type hinting for python (as a linter tool) came out back in September 2015 with Python 3.5, being championed by Guido himself. Since then variable annotations (plus protocols lately) improved its capabilities even further. Over the last two years tools, such as mypy, could build on top of it, and slowly come out of a proof of concept state (e.g. mypy API planning to become stable next spring). In this presentation, Bernat is going to detail his experience with using type hinting for both:\r\n- adding type hinting and checking type correctness for a library supporting both Python 2 and 3,\r\n - plus reusing this information to automatically insert type data into the generated Sphinx documentation.",
		"bio": "Bernat Gabor is a software engineer at Bloomberg and maintains the open source tool aiming to standardize testing in Python: tox. He is a contributing member of the PSF, living in London, and has interest in topcis such as packaging, testing or type hinting.\r\n\r\nExpressions of opinion do not necessarily reflect the views of his employer."
	}
}
